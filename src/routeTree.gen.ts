/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ReviewRouteImport } from './routes/review'
import { Route as BasicPracticeResultsRouteImport } from './routes/basic-practice-results'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WordsWordIdRouteImport } from './routes/words.$wordId'
import { Route as TopicsTopicIdRouteImport } from './routes/topics.$topicId'

const ReviewRoute = ReviewRouteImport.update({
  id: '/review',
  path: '/review',
  getParentRoute: () => rootRouteImport,
} as any)
const BasicPracticeResultsRoute = BasicPracticeResultsRouteImport.update({
  id: '/basic-practice-results',
  path: '/basic-practice-results',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WordsWordIdRoute = WordsWordIdRouteImport.update({
  id: '/words/$wordId',
  path: '/words/$wordId',
  getParentRoute: () => rootRouteImport,
} as any)
const TopicsTopicIdRoute = TopicsTopicIdRouteImport.update({
  id: '/topics/$topicId',
  path: '/topics/$topicId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/basic-practice-results': typeof BasicPracticeResultsRoute
  '/review': typeof ReviewRoute
  '/topics/$topicId': typeof TopicsTopicIdRoute
  '/words/$wordId': typeof WordsWordIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/basic-practice-results': typeof BasicPracticeResultsRoute
  '/review': typeof ReviewRoute
  '/topics/$topicId': typeof TopicsTopicIdRoute
  '/words/$wordId': typeof WordsWordIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/basic-practice-results': typeof BasicPracticeResultsRoute
  '/review': typeof ReviewRoute
  '/topics/$topicId': typeof TopicsTopicIdRoute
  '/words/$wordId': typeof WordsWordIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/basic-practice-results'
    | '/review'
    | '/topics/$topicId'
    | '/words/$wordId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/basic-practice-results'
    | '/review'
    | '/topics/$topicId'
    | '/words/$wordId'
  id:
    | '__root__'
    | '/'
    | '/basic-practice-results'
    | '/review'
    | '/topics/$topicId'
    | '/words/$wordId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BasicPracticeResultsRoute: typeof BasicPracticeResultsRoute
  ReviewRoute: typeof ReviewRoute
  TopicsTopicIdRoute: typeof TopicsTopicIdRoute
  WordsWordIdRoute: typeof WordsWordIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/review': {
      id: '/review'
      path: '/review'
      fullPath: '/review'
      preLoaderRoute: typeof ReviewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/basic-practice-results': {
      id: '/basic-practice-results'
      path: '/basic-practice-results'
      fullPath: '/basic-practice-results'
      preLoaderRoute: typeof BasicPracticeResultsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/words/$wordId': {
      id: '/words/$wordId'
      path: '/words/$wordId'
      fullPath: '/words/$wordId'
      preLoaderRoute: typeof WordsWordIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/topics/$topicId': {
      id: '/topics/$topicId'
      path: '/topics/$topicId'
      fullPath: '/topics/$topicId'
      preLoaderRoute: typeof TopicsTopicIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BasicPracticeResultsRoute: BasicPracticeResultsRoute,
  ReviewRoute: ReviewRoute,
  TopicsTopicIdRoute: TopicsTopicIdRoute,
  WordsWordIdRoute: WordsWordIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
